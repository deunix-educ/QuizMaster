"""
Django settings for cam project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
from datetime import timedelta
from decouple import config, Csv
from pathlib import Path
from contrib import utils
from django.contrib.messages import constants as message_constants
#import json

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = config('DEBUG', cast=bool)
ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())
CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', cast=Csv())
MEDIA_ROOT = BASE_DIR / 'media'

ROOT_URLCONF = 'quizmaster.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# database
DATABASE_NAME = config('DATABASE_NAME')
DATABASE_USER = config('DATABASE_USER')
DATABASE_PASSWORD = config('DATABASE_PASSWORD')
DATABASE_PORT = config('DATABASE_PORT', cast=int)
DATABASE_HOST = config('DATABASE_HOST')

# mqtt server and client
MQTT_HOST = config('MQTT_HOST')
MQTT_PORT = config('MQTT_PORT', cast=int)
MQTT_CLIENT_HOST = config('MQTT_CLIENT_HOST')
MQTT_CLIENT_PORT = config('MQTT_CLIENT_PORT', cast=int)
MQTT_USERNAME = config('MQTT_USERNAME')
MQTT_PASSWORD = config('MQTT_PASSWORD')
MQTT_CA_CERT = config('MQTT_CA_CERT')
MQTT_USE_SSL = config('MQTT_USE_SSL', cast=bool)

# supervisor ctl
SUPERVISOR_HOSTNAME = config('SUPERVISOR_HOSTNAME')
SUPERVISOR_HOSTPORT = config('SUPERVISOR_HOSTPORT')
SUPERVISOR_USERNAME = config('SUPERVISOR_USERNAME')
SUPERVISOR_PASSWORD = config('SUPERVISOR_PASSWORD')

# Application definition

INSTALLED_APPS = [
    'users',
    "admin_interface",
    "colorfield",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'import_export',
    'axes',
    'quizmaster',
]

# admin_interface
#
X_FRAME_OPTIONS = "SAMEORIGIN"
SILENCED_SYSTEM_CHECKS = ["security.W019"]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # AxesMiddleware should be the last middleware in the MIDDLEWARE list.
    # It only formats user lockout messages and renders Axes lockout responses
    # on failed user authentication attempts from login views.
    # If you do not want Axes to override the authentication response
    # you can skip installing the middleware and use your own views.
    'axes.middleware.AxesMiddleware',
]

# user model
AUTH_USER_MODEL = 'users.User'


AUTHENTICATION_BACKENDS = (
    # AxesBackend should be the first backend in the AUTHENTICATION_BACKENDS list.
    'axes.backends.AxesBackend',

    # Django ModelBackend is the default authentication backend.
    'django.contrib.auth.backends.ModelBackend',
)


ROOT_URLCONF = 'quizmaster.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'quizmaster.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

SQLITE3=config('SQLITE3')
MARIADB=config('MARIADB')

DATABASES = {
    SQLITE3: {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'db.sqlite3',
    },
    MARIADB: {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS' : {
            "init_command": "SET foreign_key_checks = 0;SET sql_mode='STRICT_TRANS_TABLES';",
            },
        'NAME': DATABASE_NAME,
        'USER': DATABASE_USER,
        'PASSWORD': DATABASE_PASSWORD,
        'HOST': DATABASE_HOST,
        'PORT': DATABASE_PORT,
    },
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/
LANGUAGE_CODE = 'fr'
LANGUAGES = (
    ('fr', 'French'),
    ('en', 'English'),
)

TIME_ZONE = 'Europe/Paris'
USE_I18N = True
USE_L10N = True
USE_TZ = False

LOCALE_CODE = "fr_FR"
LOCALE_LC_ALL = f"{LOCALE_CODE}.UTF-8"


LOCALE_PATHS = (
    BASE_DIR / 'quizmaster' / 'locale',
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'

STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SECURE_CROSS_ORIGIN_OPENER_POLICY = None

# Login / logout
#
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = "/"

## server host
#
ADMINS = [
    (config('SUPERADMIN_MAIL'), config('SUPERADMIN'), config('SUPERADMIN_PASS'), True, 100),
    (config('USER_MAIL'), config('USER_NAME'), config('USER_PASS'), False, 20),
    (config('ANON_MAIL'), config('ANON_NAME'), config('ANON_PASS'), False, 0),
]

# w3 css
#
MESSAGE_TAGS = {
    message_constants.DEBUG: 'w3-purple',
    message_constants.INFO: 'w3-blue',
    message_constants.SUCCESS: 'w3-green',
    message_constants.WARNING: 'w3-orange',
    message_constants.ERROR: 'w3-red',
}

# Default css classes for widgets and labels
#
DEFAULT_CSS = {
   'error': 'w3-panel w3-red',          # displayed in the label
   'errorlist': 'w3-padding-8 w3-red',  # encloses the error list
   'required': 'w3-text-indigo',        # used in the label and label + input enclosing box. NB: w3-validate only works if the input precedes the label!
   'label': 'w3-label',
   'Textarea': 'w3-input w3-border',
   'TextInput': 'w3-input w3-border',
   'Select': 'w3-select w3-border',
}

# crispy forms
#
CRISPY_CLASS_CONVERTERS = {
    'textinput': "w3-input w3-border w3-round",
    'passwordinput': "w3-input w3-border w3-round",
    'select': "w3-select",
    'urlinput': "w3-input w3-border w3-round",
    'numberinput': "w3-input w3-border w3-round",
    'emailinput': "w3-input w3-border w3-round",
    'dateinput': "3-input w3-border w3-round",
    'textarea': "w3-input w3-border w3-round",
    'passwordinput': "w3-input w3-border w3-round",

}

####
## WORKER mqtt
#

## topics key
#    0      1    2   3   4
# base/dev/uuid/ts/evt
TOPIC_KEYS = {
    'base': 0,  # topic base
    'if': 1,    # interface
    'dev': 1,   # device type
    'uuid': 2,  # uuid
    'ts': 3,    # timestamp
    'evt': 4,   # event name
}

BASE_ORIGINE = 'quiz'
SERVER_TOPIC_BASE = f'{BASE_ORIGINE}/srv/{utils.get_uuid()}'
SERVER_TOPIC_SUBS = [
    [f'{BASE_ORIGINE}/web/{utils.get_uuid()}/#', 0],
    [f'{BASE_ORIGINE}/box/#', 0],
]

CLIENT_TOPIC_BASE = f'{BASE_ORIGINE}/web/{utils.get_uuid()}'
CLIENT_TOPIC_SUBS = [
    [f'{BASE_ORIGINE}/srv/{utils.get_uuid()}/#', 0],
    [f'{BASE_ORIGINE}/box/#', 0],
]

MQTT_WORKER = dict(
    host        = MQTT_HOST,
    port        = MQTT_PORT,
    username    = MQTT_USERNAME,
    password    = MQTT_PASSWORD,
    keepalive   = 60,
    ca_cert     = MQTT_CA_CERT or None,
    use_ssl     = MQTT_USE_SSL,
    topic_subs  = SERVER_TOPIC_SUBS,
    topic_base  = SERVER_TOPIC_BASE,
    mediadir    = MEDIA_ROOT,
    uuid        = utils.get_uuid(),
)

MQTT_SINGLE= dict(
    hostname    = MQTT_HOST,
    port        = MQTT_PORT,
    keepalive   = 60,
    qos         = 0,
    retain      = False,
    auth        = {'username': MQTT_USERNAME, 'password':  MQTT_PASSWORD},
    tls         = None,
)

MQTT_CLIENT = dict(
    mqtthost=MQTT_CLIENT_HOST,
    mqttport=MQTT_CLIENT_PORT,
    mqttuser=MQTT_USERNAME,
    mqttpass=MQTT_PASSWORD,
    use_ssl=MQTT_USE_SSL,

)

CLIENT_BOX = dict(
    host=MQTT_HOST,
    port=MQTT_PORT,
    username=MQTT_USERNAME,
    password=MQTT_PASSWORD,
    keepalive=60,
    ca_cert= MQTT_CA_CERT or None,
    use_ssl=MQTT_USE_SSL,
)

# django mail
#
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

DEFAULT_TO_EMAIL = config("DEFAULT_TO_EMAIL")
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL")
EMAIL_HOST = config("EMAIL_HOST")
EMAIL_PORT = 587
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS = True
SERVER_EMAIL = DEFAULT_FROM_EMAIL

## AXES
#
AXES_META_PRECEDENCE_ORDER = ('HTTP_X_FORWARDED_FOR','REMOTE_ADDR', )

SILENCED_SYSTEM_CHECKS = ['axes.W003']
AXES_ENABLED = True
AXES_FAILURE_LIMIT = 5
AXES_COOLOFF_TIME = timedelta(minutes=15)
AXES_RESET_ON_SUCCESS=True
#AXES_LOCK_OUT_BY_COMBINATION_USER_AND_IP = False
#AXES_LOCK_OUT_BY_USER_OR_IP = False
AXES_USE_USER_AGENT = True


